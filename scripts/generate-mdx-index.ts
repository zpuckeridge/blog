"use server";

import { readFile, writeFile } from "node:fs/promises";
import path from "node:path";
import fg from "fast-glob";
import matter from "gray-matter";

const outputFile = path.resolve("./_content/index.ts");

export interface MDXModule {
	frontmatter: {
		title: string;
		date: string;
		tag?: string;
		slug: string;
		type?: string;
		image?: string;
		imageAlt?: string;
		videoUrl?: string;
		duration?: number;
		description?: string;
		lastModified?: string;
		signature?: boolean;
		ISBN?: number;
		published?: string;
		author?: string;
		review?: number;
		setting?: string;
		with?: {
			name: string;
		}[];
	};
	content: string;
}

async function generateMDXIndex() {
	const files = await fg(["./_content/**/*.mdx"]);
	console.log(`Found ${files.length} MDX Files`);

	const importStatements = await Promise.all(
		files.map(async (file, index) => {
			const fileContent = await readFile(file, "utf-8");
			const { data: frontmatter, content } = matter(fileContent);

			// Determine type based on directory
			let type = "Post";
			if (file.includes("/notes/")) {
				type = "Note";
			} else if (file.includes("/videos/")) {
				type = "Video";
			} else if (file.includes("/books/")) {
				type = "Book";
			} else if (file.includes("/movies/")) {
				type = "Movie";
			}

			// Generate slug from filename if missing
			const filename = path.basename(file, ".mdx");
			const slug = frontmatter.slug || filename;

			// Ensure description is never null
			const description = frontmatter.description || "";

			return `export const _mdx_${index}_: MDXModule = {
  frontmatter: ${JSON.stringify({
		...frontmatter,
		type,
		slug,
		description,
	})},
  content: ${JSON.stringify(content)}
};`;
		})
	);

	const mdxIndex = `/* This file is automatically generated by generate-mdx-index.ts

Import every single MDX file in the content folder. This gets around the fact that Cloudflare doesn't have filesystem access during runtime. This file will be re-generated on every build.
*/

export interface MDXModule {
  frontmatter: {
    title: string;
    date: string;
    tag?: string;
    slug: string;
    type?: string;
    image?: string;
    imageAlt?: string;
    videoUrl?: string;
    duration?: number;
    description?: string;
    lastModified?: string;
    signature?: boolean;
    ISBN?: number;
	published?: string;
	author?: string;
    review?: number;
    setting?: string;
    with?: {
      name: string;
    }[];
  };
  content: string;
}

${importStatements.join("\n\n")}`;

	await writeFile(outputFile, mdxIndex);
	console.log(`ðŸŽ‰ MDX index generated. Wrote ${files.length} file imports to ${outputFile}`);
}

generateMDXIndex();
